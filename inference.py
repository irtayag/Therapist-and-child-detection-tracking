# -*- coding: utf-8 -*-
"""Inference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cKhEUysT1GD5rlmQ4ZQhf6sSkCW7Hsw3
"""

!pip install yt-dlp
!yt-dlp -o "/content/videos/video1.mp4" "https://www.youtube.com/watch?v=V9YDDpo9LWg"

from IPython.display import HTML

def display_video(video_path):
    # Create an HTML string to display the video
    video_tag = f'<video width="640" height="480" controls><source src="{video_path}" type="video/mp4"></video>'
    display(HTML(video_tag))

import cv2
import numpy as np
from deep_sort_realtime.deepsort_tracker import DeepSort
from ultralytics import YOLO
from IPython.display import HTML, display

# Initialize YOLOv8 model
model = YOLO('yolov8n.pt')

# Initialize DeepSORT
tracker = DeepSort(max_age=30, n_init=2, nms_max_overlap=1.0)

def display_video(video_path):
    video_tag = f'<video width="640" height="480" controls><source src="{video_path}" type="video/mp4"></video>'
    display(HTML(video_tag))

# Ensure videos are downloaded and paths are correct
video_files = [
    'https://www.youtube.com/watch?v=V9YDDpo9LWg',
    'https://www.youtube.com/watch?v=JBoc3w5EKfI',
    'https://www.youtube.com/watch?v=aWV7UUMddCU',
    'https://www.youtube.com/watch?v=f6wqlpG9rd0',
    'https://www.youtube.com/watch?v=GNVTuLHdeSo',
    'https://www.youtube.com/watch?v=SWtmkjd45so',
    'https://www.youtube.com/watch?v=RzI6Ar5mu2Q',
    'https://www.youtube.com/watch?v=aulLej6Z6W8',
    'https://www.youtube.com/watch?v=7pN6ydLE4EQ',
    'https://www.youtube.com/watch?v=fEEelCgBkWA',
    'https://www.youtube.com/watch?v=ckZQbQwM3oU',
    'https://www.youtube.com/watch?v=E8Wgwg3F4X0',
    'https://www.youtube.com/watch?v=rvIPH4ccfpI',
    'https://www.youtube.com/watch?v=F6iqlW6ovZc',
    'https://www.youtube.com/watch?v=9qjk-Sq415s&list=PL5B0D2D5B4BFE92C1&index=6',
    'https://www.youtube.com/watch?v=DI25kGJis0w',
    'https://www.youtube.com/watch?v=rrLhFZG6iQY',
    'https://www.youtube.com/watch?v=RKOZbT0ftL4&t=1s',
    'https://www.youtube.com/watch?v=N7TBbWHB01E',
    'https://www.youtube.com/watch?v=1YqVEVbXQ1c'
]

for video_file in video_files:
    # Open video capture
    cap = cv2.VideoCapture(video_file)
    output_file = video_file.replace('.mp4', '_output.avi')  # Define output file name

    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter(output_file, fourcc, 30, (int(cap.get(3)), int(cap.get(4))))

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Perform object detection using YOLO
        results = model(frame)

        detections = []
        for result in results:
            for box in result.boxes:
                x1, y1, x2, y2 = box.xyxy[0].cpu().int().tolist()
                confidence = box.conf[0].cpu().tolist()
                class_id = box.cls[0].cpu().tolist()

                if int(class_id) == 0:
                    detections.append([x1, y1, x2, y2, confidence])

        detections = np.array(detections, dtype=np.float32) if detections else np.empty((0, 5), dtype=np.float32)

        # Update tracker with new detections
        tracks = tracker.update_tracks(detections, frame=frame)

        for track in tracks:
            if not track.is_confirmed():
                continue

            track_id = track.track_id
            ltrb = track.to_ltrb()

            cv2.rectangle(frame, (int(ltrb[0]), int(ltrb[1])), (int(ltrb[2]), int(ltrb[3])), (0, 255, 0), 2)
            cv2.putText(frame, f'ID: {track_id}', (int(ltrb[0]), int(ltrb[1]) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

        out.write(frame)

    cap.release()
    out.release()
    cv2.destroyAllWindows()

    # Display the output video
    display_video(output_file)